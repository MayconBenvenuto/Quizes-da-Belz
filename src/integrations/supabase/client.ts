// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Prefer environment variables; fall back to empty string if not defined.
// For Vite, variables must be prefixed with VITE_ to be exposed to the client.
const SUPABASE_URL = (import.meta.env.VITE_SUPABASE_URL || '').trim();
const SUPABASE_PUBLISHABLE_KEY = (import.meta.env.VITE_SUPABASE_ANON_KEY || '').trim();

export const SUPABASE_CONFIG_OK = Boolean(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);
if (!SUPABASE_CONFIG_OK) {
  console.error("[Supabase] Variáveis de ambiente ausentes. Defina VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY.");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Evita quebrar totalmente a aplicação em produção exibindo telas vazias; funções que chamarem
// supabase com credenciais vazias irão falhar nas requisições, porém a UI ainda renderiza.
export const supabase = SUPABASE_CONFIG_OK
  ? createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
    }
  })
  // Criamos um client "inócuo" que nunca faz chamadas reais, evitando erros de rede.
  : {
      from: () => ({
        select: () => Promise.reject(new Error('Supabase não configurado')), 
        insert: () => Promise.reject(new Error('Supabase não configurado')),
        update: () => Promise.reject(new Error('Supabase não configurado')),
        delete: () => Promise.reject(new Error('Supabase não configurado')),
      })
    } as unknown as ReturnType<typeof createClient<Database>>;